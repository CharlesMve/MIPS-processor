-----------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity instruction_mem is
Port (
        addr : in std_logic_vector(27 downto 0);
        d_out : out std_logic_vector(31 downto 0));
end instruction_mem;

architecture Behavioral of instruction_mem is
type mem_type is array (0 to 1023) of std_logic_vector(7 downto 0);
signal memInstruction : mem_type := (
--000000 01001 01001 01001 00000 100110
x"00", x"00", x"00", x"00",
x"00", x"00", x"00", x"00",
x"00", x"00", x"00", x"00",

--x"00", x"00", x"00", x"26", -- ADD 0 to R0

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"21", x"08", x"26", -- ADD 0 to R1

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"42", x"10", x"26", -- ADD 0 to R2

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"63", x"18", x"26", -- ADD 0 to R3

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"84", x"20", x"26", -- ADD 0 to R4

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"A5", x"28", x"26", -- ADD 0 to R5

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"C6", x"30", x"26", -- ADD 0 to R6

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"E7", x"38", x"26", -- ADD 0 to R7

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"00", x"E7", x"38", x"26", -- ADD 0 to R8

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"01", x"29", x"48", x"26", -- ADD 0 to R9


-----

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"20", x"00", x"00", x"00", -- ADD 0 to R0

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
 
--x"20", x"21", x"00", x"01", -- ADD 1 to R1

--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
 
-- x"00", x"01", x"10", x"20", --ADD R0&R1 to R2
 
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"00", x"22", x"18", x"20", --ADD R1&R2 to R3
 
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"00", x"43", x"20", x"20", --ADD R2&R3 to R4
 
-- x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"00", x"64", x"28", x"20", --ADD R3&R4 to R5
 
-- x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"00", x"85", x"30", x"20", --ADD R4&R5 to R6
 
-- x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"00", x"A6", x"38", x"20", --ADD R5&R6 to R7
----- 
-- x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

 x"8C", x"01", x"03", x"FE", --load from 1022 to r1
 -- 100011 00000 00001 0000001111111110
 x"00", x"00", x"00", x"00",
x"00", x"00", x"00", x"00",
x"00", x"00", x"00", x"00",

 x"20", x"29", x"00", x"03", --ADD R1 + 3 => R9
 -- 001000 00001 01001 0000000000000011
 x"00", x"00", x"00", x"00",
x"00", x"00", x"00", x"00",
x"00", x"00", x"00", x"00",

x"AC", x"09", x"03", x"FF", --STORE to 1023 
--  --101011 00000 01001 0000001111111111
-- x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"20", x"21", x"00", x"03", --ADD 3 to R1
 
--  x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"20", x"22", x"00", x"07", --R1 + 7 => R2
 
-- x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

-- x"AC", x"02", x"00", x"01", --SW R2 in Imm(R0)  
-- -- 101011 00000 00010 0000000000000001
-- x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

--x"8C", x"03", x"00", x"01", --LW Imm(R0) in R3
-- -- 100011 00000 00011 0000000000000001
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",
--x"00", x"00", x"00", x"00",

others => (others => '0'));
--000000 00000 00000 00000 00000 100110
--001000 01001 01001 0000000000000000
-- 001000 00000 00000 0000000000000000
-- 001000 00001 00001 0000000000000001

-- 000000 00000 00001 00010 00000 100000 -3 x

-- 000000 00001 00010 00011 00000 100000 -4 x
----------------------------------------------------------
-- 000000 00010 00011 00100 00000 100000 -5 x

-- 000000 00011 00100 00101 00000 100000 -6 x

-- 000000 00100 00101 00110 00000 100000 -7 x

-- 000000 00101 00110 00111 00000 100000 -8 x
-- 000000 00110 00111 01000 00000 100000 -9 x
-- 000000 00111 01000 01001 00000 100000 -10 x
-- 000000 00001 00010 00011 00000 100110

-- 001100 00001 00100 0000000000000010
-- 001101 00001 00100 0000000000000010
-- 001110 00001 00100 0000000000000010
-- 101011 00001 00100 0000000000000000
-- 100011 00001 00100 0000000000000000

begin
process(addr)
begin
        if (to_integer(unsigned(addr))+3 > 1024) then
            d_out <= "00000000000000000000000000000000";
         else 
        d_out <= memInstruction(to_integer(unsigned(addr))) & memInstruction(to_integer(unsigned(addr))+1) & memInstruction(to_integer(unsigned(addr))+2) & memInstruction(to_integer(unsigned(addr))+3);
        end if;
    
end process;
end Behavioral;
